set.seed(123)
#| echo: true
#| fig-width: 12
# Funciones para calcular media y varianza teóricas
media_teorica <- function(a, b) {
return(a / (a + b))
}
varianza_teorica <- function(a, b) {
return((a * b) / ((a + b)^2 * (a + b + 1)))
}
# Parámetros de la distribución beta
a_param <- 2
b_param <- 5
n_sizes <- seq(100, 10000, by = 100)
media_muestral <- numeric(length(n_sizes))
varianza_muestral <- numeric(length(n_sizes))
media_teo <- media_teorica(a_param, b_param)
varianza_teo <- varianza_teorica(a_param, b_param)
for (i in seq_along(n_sizes)) {
n <- n_sizes[i]
muestra <- rbeta(n, a_param, b_param)
media_muestral[i] <- mean(muestra)
varianza_muestral[i] <- var(muestra)
}
df_convergencia <- data.frame(
n = n_sizes,
media_muestral = media_muestral,
varianza_muestral = varianza_muestral
)
# Gráfica de convergencia de la media
p_media <- ggplot(df_convergencia, aes(x = n, y = media_muestral)) +
geom_line(color = "blue", size = 1) +
geom_hline(yintercept = media_teo, linetype = "dashed", color = "red") +
labs(
title = "Convergencia de la Media Muestral a la Media Teórica",
subtitle = paste("Media Teórica =", round(media_teo, 4)),
x = "Tamaño de la Muestra (n)",
y = "Media Muestral"
) +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold")) +
ylim(0, 1)
set.seed(123)
#| echo: true
#| fig-width: 12
# Funciones para calcular media y varianza teóricas
media_teorica <- function(a, b) {
return(a / (a + b))
}
varianza_teorica <- function(a, b) {
return((a * b) / ((a + b)^2 * (a + b + 1)))
}
# Parámetros de la distribución beta
a_param <- 2
b_param <- 5
n_sizes <- seq(100, 10000, by = 100)
media_muestral <- numeric(length(n_sizes))
varianza_muestral <- numeric(length(n_sizes))
media_teo <- media_teorica(a_param, b_param)
varianza_teo <- varianza_teorica(a_param, b_param)
for (i in seq_along(n_sizes)) {
n <- n_sizes[i]
muestra <- rbeta(n, a_param, b_param)
media_muestral[i] <- mean(muestra)
varianza_muestral[i] <- var(muestra)
}
df_convergencia <- data.frame(
n = n_sizes,
media_muestral = media_muestral,
varianza_muestral = varianza_muestral
)
# Gráfica de convergencia de la media
p_media <- ggplot(df_convergencia, aes(x = n, y = media_muestral)) +
geom_line(color = "blue", size = 1) +
geom_hline(yintercept = media_teo, linetype = "dashed", color = "red") +
labs(
title = "Convergencia de la Media Muestral a la Media Teórica",
subtitle = paste("Media Teórica =", round(media_teo, 4)),
x = "Tamaño de la Muestra (n)",
y = "Media Muestral"
) +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold")) +
ylim(0, 1)
#| echo: true
#| fig-width: 12
set.seed(456)
# Parámetros de la distribución beta
a_param <- 2
b_param <- 5
n_sizes <- c(5, 30, 100, 500)
n_replicas <- 1000
# Función para generar medias muestrales
generar_medias <- function(n, a, b, n_rep) {
medias <- replicate(n_rep, mean(rbeta(n, a, b)))
return(medias)
}
plots_tcl <- list()
for (n in n_sizes) {
medias_muestrales <- generar_medias(n, a_param, b_param, n_replicas)
df_tcl <- data.frame(medias = medias_muestrales)
media_teo <- a_param / (a_param + b_param)
varianza_teo <- (a_param * b_param) / ((a_param + b_param)^2 * (a_param + b_param + 1))
sd_teo <- sqrt(varianza_teo / n)
p <- ggplot(df_tcl, aes(x = medias)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightgreen", color = "black", alpha = 0.7) +
stat_function(fun = dnorm, args = list(mean = media_teo, sd = sd_teo), color = "blue", size = 1) +
labs(
title = paste("TCL: n =", n),
subtitle = paste("Media Teórica =", round(media_teo, 4),
"| Desv. Est. Teórica =", round(sd_teo, 4)),
x = "Media Muestral",
y = "Densidad"
) +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold")) +
xlim(0, 1)
plots_tcl[[as.character(n)]] <- p
}
#| label: setup
#| echo: false
#| message: false
#| warning: false
library(ggplot2)
library(dplyr)
library(gridExtra)
library(knitr)
library(kableExtra)
library(RColorBrewer)
library(plotly)
library(scales)
library(viridis)
set.seed(123)  # Para reproducibilidad
sample_sizes <- c(100, 300, 1000)
results <- data.frame(
SampleSize = integer(),
SampleMean = numeric(),
TheoreticalMean = numeric(),
SampleVariance = numeric(),
TheoreticalVariance = numeric()
)
for (n in sample_sizes) {
sample <- rt(n, df = 5)
sample_mean <- mean(sample)
sample_variance <- var(sample)
results <- rbind(results, data.frame(
SampleSize = n,
SampleMean = sample_mean,
TheoreticalMean = ifelse(5 > 1, 0, NA),
SampleVariance = sample_variance,
TheoreticalVariance = ifelse(5 > 2, 5 / (5 - 2), NA)
))
}
kable(results, caption = "Comparación de Media y Varianza Muestral vs Teórica") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F)
# Muestra de tamaño 1000
set.seed(123)
sample_large <- rt(1000, df = 5)
hist_data <- data.frame(value = sample_large)
ggplot(hist_data, aes(x = value)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.7) +
stat_function(fun = dt, args = list(df = 5), color = "red", size = 1.2, linetype = "solid") +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1), color = "green", size = 1.2, linetype = "dashed") +
labs(
title = "Histograma de Muestra t(5) con Densidades Teóricas",
x = "Valor",
y = "Densidad"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
) +
xlim(-5, 5)
# Verificación mediante simulación
n <- 10
X <- rnorm(1000, 0, 1)
Y <- rchisq(1000, df = n)
T <- X / sqrt(Y / n)
hist(T, breaks = 30, probability = TRUE, main = "Histograma de T con t(10)", xlab = "T")
curve(dt(x, df = n), col = "red", lwd = 2, add = TRUE)
#| label: setup
#| include: false
library(ggplot2)
library(dplyr)
library(gridExtra)
library(knitr)
library(kableExtra)
library(RColorBrewer)
library(plotly)
#| warning: false
#| message: false
# Parámetros de la distribución gamma
alpha_tcl <- 2.5
lambda_tcl <- 1.8
media_teorica_tcl <- alpha_tcl / lambda_tcl
varianza_teorica_tcl <- alpha_tcl / lambda_tcl^2
tamaños_muestra_tcl <- c(5, 10, 20, 30, 50, 100)
set.seed(123)
resultados_tcl <- data.frame()
for (n in tamaños_muestra_tcl) {
medias_muestrales <- replicate(1000, mean(rgamma(n, shape = alpha_tcl, rate = lambda_tcl)))
varianza_muestral <- var(medias_muestrales)
resultados_tcl <- rbind(resultados_tcl, data.frame(
n = n,
media_muestral = mean(medias_muestrales),
varianza_muestral = varianza_muestral,
varianza_teorica_div_n = varianza_teorica_tcl / n
))
# Graficar histograma con densidad normal teórica
ggplot(data.frame(x = medias_muestrales), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 30,
fill = "lightgreen", color = "black", alpha = 0.7) +
stat_function(fun = dnorm, args = list(mean = media_teorica_tcl,
sd = sqrt(varianza_teorica_tcl / n)),
color = "blue", linewidth = 1.5) +
labs(title = paste("Histograma de Medias Muestrales (n =", n, ")"),
subtitle = "Distribución Gamma(2.5, 1.8)",
x = "Media Muestral",
y = "Densidad",
caption = "Curva azul: Distribución normal teórica según TCL") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)) +
xlim(media_teorica_tcl - 1, media_teorica_tcl + 1) +
ylim(0, 1)
}
# Mostrar tabla de resultados
kable(resultados_tcl,
caption = "Comparación de medias y varianzas muestrales con valores teóricos",
digits = 4,
col.names = c("n", "Media Muestral", "Varianza Muestral", "Varianza Teórica / n")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
library(fitdistrplus)
library(MASS)
library(ggplot2)
library(dplyr)
library(gridExtra)
n <- 200
datos <- rweibull(n, shape = 2, scale = 5)  # forma = 2, escala = 5
summary(datos)
p1 <- ggplot(data.frame(x = datos), aes(x)) +
geom_histogram(aes(y = ..density..), bins = 20, fill = "skyblue", color = "black") +
geom_density(color = "red", size = 1.2) +
labs(title = "Distribución empírica de los datos", x = "Valor", y = "Densidad") +
theme_minimal()
p2 <- ggplot(data.frame(x = datos), aes(y = x)) +
geom_boxplot(fill = "orange", color = "black") +
labs(title = "Boxplot de la variable", y = "Valor") +
theme_minimal()
grid.arrange(p1, p2, ncol = 2)
# Método de Máxima Verosimilitud
ajuste <- fitdist(datos, "weibull")
summary(ajuste)
# Parámetros estimados
forma_est <- ajuste$estimate["shape"]
escala_est <- ajuste$estimate["scale"]
cat("\nParámetro de forma (k):", forma_est)
cat("\nParámetro de escala (λ):", escala_est, "\n")
# Gráfico de densidad teórica vs empírica
x_seq <- seq(min(datos), max(datos), length.out = 200)
dens_teorica <- dweibull(x_seq, shape = forma_est, scale = escala_est)
ggplot() +
geom_histogram(aes(x = datos, y = ..density..),
bins = 20, fill = "lightblue", color = "black", alpha = 0.6) +
geom_line(aes(x = x_seq, y = dens_teorica), color = "darkred", size = 1.2) +
labs(title = "Ajuste de la distribución Weibull",
x = "Valor", y = "Densidad") +
theme_minimal()
par(mfrow = c(2, 2))
plot(ajuste)
par(mfrow = c(1, 1))
# La función de supervivencia (S(x)) = exp(-(x/λ)^k)
Sx <- function(x, k, lambda) exp(-(x/lambda)^k)
# La función de riesgo (h(x)) = (k/λ) * (x/λ)^(k-1)
hx <- function(x, k, lambda) (k/lambda) * (x/lambda)^(k-1)
# Curvas de supervivencia y riesgo
x_vals <- seq(0, max(datos), length.out = 200)
supervivencia <- Sx(x_vals, forma_est, escala_est)
riesgo <- hx(x_vals, forma_est, escala_est)
p3 <- ggplot(data.frame(x_vals, supervivencia), aes(x_vals, supervivencia)) +
geom_line(color = "blue", size = 1.2) +
labs(title = "Función de supervivencia Weibull", x = "x", y = "S(x)") +
theme_minimal()
p4 <- ggplot(data.frame(x_vals, riesgo), aes(x_vals, riesgo)) +
geom_line(color = "red", size = 1.2) +
labs(title = "Función de riesgo Weibull", x = "x", y = "h(x)") +
theme_minimal()
grid.arrange(p3, p4, ncol = 2)
# Pruebas estadísticas
ks <- ks.test(datos, "pweibull", shape = forma_est, scale = escala_est)
ad <- gofstat(ajuste)
cat("\n--- Prueba KS ---\n")
print(ks)
cat("\n--- Estadísticos de bondad de ajuste ---\n")
print(ad)
